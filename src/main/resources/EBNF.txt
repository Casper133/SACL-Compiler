/* Grammar */

source_code ::= (WHITE_SPACE_CHARACTER* LINE_BREAK_CHARACTER)* constants_block?
    (WHITE_SPACE_CHARACTER* LINE_BREAK_CHARACTER)+ config_block_body?
    (WHITE_SPACE_CHARACTER* LINE_BREAK_CHARACTER)*

constants_block ::= constant_declaration
    ((WHITE_SPACE_CHARACTER* LINE_BREAK_CHARACTER)+ constant_declaration)*

constant_declaration ::= CONST_KEYWORD WHITE_SPACE_CHARACTER+ record_declaration

config_block_body ::= (config_block | name_value_pair)
    ((WHITE_SPACE_CHARACTER* LINE_BREAK_CHARACTER)+ (config_block | name_value_pair))*

config_block ::= WHITE_SPACE_CHARACTER* identifier WHITE_SPACE_CHARACTER*
    LEFT_BRACE WHITE_SPACE_CHARACTER*
    (WHITE_SPACE_CHARACTER* LINE_BREAK_CHARACTER)+ config_block_body
    (WHITE_SPACE_CHARACTER* LINE_BREAK_CHARACTER)+ WHITE_SPACE_CHARACTER*
    RIGHT_BRACE WHITE_SPACE_CHARACTER*

name_value_pair ::= WHITE_SPACE_CHARACTER* record_declaration

record_declaration ::= identifier WHITE_SPACE_CHARACTER* EQUAL WHITE_SPACE_CHARACTER* record_value

record_value ::= constant_call | escaped_sequence characters_sequence | characters_sequence

constant_call ::= DOLLAR_SIGN identifier


/* Tokens */

escaped_sequence ::= (BACKSLASH (BACKSLASH | DOLLAR_SIGN))+

characters_sequence ::= (SOURCE_CODE_CHARACTER | WHITE_SPACE_CHARACTER)+

identifier ::= (IDENTIFIER_CHARACTER)+

CONST_KEYWORD ::= "const"

LEFT_BRACE ::= "{"

RIGHT_BRACE ::= "}"

EQUAL ::= "="

DOLLAR_SIGN ::= "$"

BACKSLASH ::= "\"

IDENTIFIER_CHARACTER ::= [A-Z] | [a-z] | [0-9] | "_" | "-" | "."

SOURCE_CODE_CHARACTER ::= [#x21-#xFF]   /* Extended ASCII table without control characters */

WHITE_SPACE_CHARACTER ::= #x20 | #x09   /* Space | Tab */

LINE_BREAK_CHARACTER ::= (#x0D #x0A)    /* CR LF */
    | #x0D                              /* CR */
    | #x0A                              /* LF */
